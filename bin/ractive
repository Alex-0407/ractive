#!/usr/bin/env node
/* eslint-env node */

const path = require( 'path' );
const fs = require( 'fs' );

const util = require( '../lib/util' );
const parse = require( '../lib/parse' );
const component = require( '../lib/component' );

const args = process.argv.slice();

if ( ~args[0].indexOf( 'node' ) ) args.shift();
const program = args.shift();
const cmd = args.shift();

let input = process.stdin;
let output = process.stdout;
// base path for resolving paths
let base = process.cwd();

function readFile ( name ) {
	return Promise.resolve( fs.readFileSync( path.resolve( base, name ), { encoding: 'utf8' } ) );
}

function dirIndexOrFile ( name ) {
	const stats = util.stat( name );
	if ( stats && stats.isDirectory() ) {
		base = name;
		if ( util.stat( path.resolve( name, './index.ractive' ) ) ) {
			input = fs.createReadStream( path.resolve( name, './index.ractive' ) );
		} else {
			input = fs.createReadStream( path.resolve( name, './index.html' ) );
		}
	} else {
		base = path.dirname( name );
		input = fs.createReadStream( name );
	}
}

let arg;
const opts = {};

switch ( cmd ) {
	case 'parse':
		while ( arg = args.shift() ) {
			switch ( arg ) {
				case '-i':
				case '--input':
					input = fs.createReadStream( args.shift() );
					break;

				case '-o':
				case '--output':
					output = fs.createWriteStream( args.shift() );
					break;

				case '-t':
				case '--text-only':
					opts.textOnlyMode = true;
					break;

				case '-x':
				case '--nocsp':
					opts.csp = false;
					break;

				case '-d':
				case '--delimiters':
					opts.delimiters = [ args.shift(), args.shift() ];
					break;

				case '-s':
				case '--static':
					opts.staticDelimiters = [ args.shift(), args.shift() ];
					break;

				case '-r':
				case '--triple':
					opts.tripleDelimiters = [ args.shift(), args.shift() ];
					break;

				case '-p':
				case '--static-triple':
					opts.staticTripleDelimiters = [ args.shift(), args.shift() ];
					break;

				case '-u':
				case '--escape-unicode':
					opts.escapeUnicode = true;
					break;

				default:
					if ( !args.length && util.stat( arg ) ) { // last may be the input file
						input = fs.createReadStream( arg );
					} else {
						console.error( '??? ', arg );
					}
					break;
			}
		}
		util.readToString( input ).then( string => {
			return parse.parse( string, opts ).
				then( string => util.writeToStream( output, string ) );
		}, err => {
			console.error( err.message );
			process.exit( 1 );
		});
		break;

	case 'component':
		while ( arg = args.shift() ) {
			switch ( arg ) {
				case '-i':
				case '--input':
					const file = args.shift();
					dirIndexOrFile( file );
					break;

				case '-o':
				case '--output':
					output = fs.createWriteStream( args.shift() );
					break;

				case '-x':
				case '--nocsp':
					opts.csp = false;
					break;

				case '-d':
				case '--delimiters':
					opts.delimiters = [ args.shift(), args.shift() ];
					break;

				case '-s':
				case '--static':
					opts.staticDelimiters = [ args.shift(), args.shift() ];
					break;

				case '-r':
				case '--triple':
					opts.tripleDelimiters = [ args.shift(), args.shift() ];
					break;

				case '-p':
				case '--static-triple':
					opts.staticTripleDelimiters = [ args.shift(), args.shift() ];
					break;

				case '-u':
				case '--escape-unicode':
					opts.escapeUnicode = true;
					break;

				default:
					if ( !args.length && util.stat( arg ) ) { // last may be the input file
						dirIndexOrFile( arg );
					} else {
						console.error( '??? ', arg );
					}
					break;
			}
		}
		util.readToString( input ).then( string => {
			return component.build( string, opts, readFile ).
				then( string => util.writeToStream( output, string ) );
		}).then( null, err => {
			console.error( err.stack );
			process.exit( 1 );
		});
		break;

	default:
		console.error( `Usage: ractive [command] [options] [file]\n  Commands:` );
		console.error( parse.help );
		console.error( component.help );
		process.exit( 1 );
}
